const id = "condiciones-js.md";
						const collection = "blog";
						const slug = "condiciones-js";
						const body = "**Tomando Decisiones en JavaScript: El Poder de las Estructuras de Control de Flujo**\n\nEn el mundo de la programación, la capacidad de tomar decisiones es esencial para escribir código dinámico y adaptativo. En JavaScript, una de las herramientas clave para este propósito es la estructura de control de flujo `if`. Acompáñame mientras exploramos el uso de `if` y sus variantes.\n\n![sofi](/img/img_blog/sofiRed.webp)\n\n### 1. if-else: Tomando Rutas Diferentes\n\nLa estructura `if-else` nos permite ejecutar bloques de código diferentes según si una condición es verdadera o falsa. Veamos un ejemplo práctico:\n\n```javascript\nlet edad = 18;\n\nif (edad >= 18) {\n  console.log(\"Eres mayor de edad\");\n} else {\n  console.log(\"Eres menor de edad\");\n}\n```\n\nAquí, el programa decide si una persona es mayor o menor de edad, imprimiendo el mensaje correspondiente. Es como tener dos caminos posibles en una encrucijada.\n\n\n### 2. if-else if-else: Navegando Entre Opciones\n\nPara situaciones más complejas con múltiples condiciones, podemos usar `else if` para evaluar casos adicionales:\n\n```javascript\nlet hora = 14;\n\nif (hora < 12) {\n  console.log(\"Buenos días\");\n} else if (hora < 18) {\n  console.log(\"Buenas tardes\");\n} else {\n  console.log(\"Buenas noches\");\n}\n```\n\nAquí, el programa saluda según la hora del día, brindando mensajes personalizados para la mañana, tarde y noche.\n\n### 3. Operador Ternario: Elegancia en una Línea\n\nEl operador ternario es una forma concisa de expresar estructuras `if-else` en una sola línea:\n\n```javascript\nlet esMayor = edad >= 18 ? \"Mayor de edad\" : \"Menor de edad\";\nconsole.log(esMayor);\n```\n\nEste enfoque es especialmente útil cuando deseas asignar un valor basado en una condición de manera eficiente.\n\n### 4. switch: Una Alternativa Estructurada\n\n`switch` es ideal cuando tienes múltiples casos y deseas ejecutar diferentes bloques de código según el valor de una expresión:\n\n```javascript\nlet diaDeLaSemana = \"Lunes\";\n\nswitch (diaDeLaSemana) {\n  case \"Lunes\":\n    console.log(\"Comienzo de la semana\");\n    break;\n  case \"Viernes\":\n    console.log(\"¡Viernes, por fin!\");\n    break;\n  default:\n    console.log(\"Es otro día de la semana\");\n}\n```\n\nEsta construcción es como un menú de opciones, donde el código se dirige al caso correspondiente.\n\n### 5. Truthy y Falsy: Más Allá de lo Estrictamente Verdadero o Falso\n\nEn contextos booleanos, los valores pueden ser evaluados como `truthy` o `falsy`. Esto puede ser aprovechado en declaraciones `if` de la siguiente manera:\n\n```javascript\nlet nombre = \"\";\n\nif (nombre) {\n  console.log(\"El nombre es truthy\");\n} else {\n  console.log(\"El nombre es falsy\");\n}\n```\n\nAquí, el programa determina si el nombre es considerado \"truthy\" o \"falsy\" en un contexto booleano.\n\nAl comprender estas estructuras de control de flujo en JavaScript, te equipas con poderosas herramientas para guiar el comportamiento de tu código. ¡Explora, experimenta y toma decisiones informadas en tus programas!";
						const data = {title:"Javascript: Condicionales",description:"Aprenderemos sobre condiciones en Javascript así como su implementación",pubDate:new Date(1705532400000),heroImage:"../img/img_blog/sofiRed.webp"};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/REDOUANE ESTC/Desktop/sofidev-portfolio-astro-sofidev/src/content/blog/condiciones-js.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
