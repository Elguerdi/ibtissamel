const id = "funciones-js.md";
						const collection = "blog";
						const slug = "funciones-js";
						const body = "\n## JavaScript: Explorando Funciones y Comprendiendo Variables\n\n![javascript image](/img/img_blog/javascript2.webp)\n\nEn esta segunda entrega de nuestra gu√≠a pr√°ctica de JavaScript, nos sumergiremos en el fascinante mundo de las funciones y exploraremos las sutilezas entre `var`, `let` y `const`. Prep√°rate para desentra√±ar estos conceptos cruciales en tu viaje por el desarrollo web.\n\n## Funciones en JavaScript\n\nLas funciones son bloques de c√≥digo reutilizables que realizan una tarea espec√≠fica. Crear una funci√≥n implica dos pasos fundamentales: la declaraci√≥n y la ejecuci√≥n.\n\n### Declaraci√≥n de Funciones\n\n```javascript\nfunction saludar(nombre) {\n  console.log(`¬°Hola, ${nombre}!`);\n}\n```\n\nAqu√≠, `saludar` es el nombre de la funci√≥n, y `(nombre)` son los par√°metros que puede aceptar.\n\n### Ejecuci√≥n de Funciones\n\n```javascript\nsaludar(\"Juan\");\n// Salida: ¬°Hola, Juan!\n```\n\nAl llamar a la funci√≥n `saludar` con el argumento `\"Juan\"`, ejecutamos el c√≥digo dentro de la funci√≥n y obtenemos la salida esperada.\n\n### Tipos de Funciones\n\n#### Funciones con Valor de Retorno\n\n```javascript\nfunction sumar(a, b) {\n  return a + b;\n}\n\nlet resultado = sumar(3, 5);\n// resultado: 8\n```\n\n#### Funciones An√≥nimas\n\n```javascript\nlet saludar = function(nombre) {\n  console.log(`¬°Hola, ${nombre}!`);\n};\n\nsaludar(\"Ana\");\n// Salida: ¬°Hola, Ana!\n```\n\n#### Arrow Functions\n\n```javascript\nlet multiplicar = (a, b) => a * b;\n\nlet producto = multiplicar(4, 6);\n// producto: 24\n```\n\nLas funciones de flecha (`arrow functions`) son una forma m√°s concisa de escribir funciones.\n\n## Variables: var, let y const\n\n### `var`\n\n```javascript\nfunction ejemploVar() {\n  if (true) {\n    var x = 10;\n  }\n  console.log(x);\n}\n\nejemploVar();\n// Salida: 10\n```\n\n`var` tiene un √°mbito de funci√≥n, lo que significa que su declaraci√≥n se eleva al nivel superior de su contexto de ejecuci√≥n.\n\n### `let`\n\n```javascript\nfunction ejemploLet() {\n  if (true) {\n    let y = 20;\n  }\n  console.log(y); // ¬°Error!\n}\n\nejemploLet();\n```\n\n`let` tiene un √°mbito de bloque, lo que significa que est√° limitado al bloque de c√≥digo m√°s cercano.\n\n### `const`\n\n```javascript\nfunction ejemploConst() {\n  const PI = 3.14;\n  console.log(PI);\n}\n\nejemploConst();\n// Salida: 3.14\n```\n\nEn este ejemplo, `const` se utiliza para declarar una constante `PI` y se le asigna el valor de `3.14`. Aunque es posible asignar un valor a `const` solo una vez, ten en cuenta que esto no impide que el contenido del objeto al que se refiere cambie si es un objeto mutable.\n\n## Scope en JavaScript\n\nEl scope se refiere a la accesibilidad y visibilidad de las variables en diferentes partes del c√≥digo.\n\n### Scope Global\n\n```javascript\nlet globalVar = \"Soy global\";\n\nfunction ejemploScopeGlobal() {\n  console.log(globalVar);\n}\n\nejemploScopeGlobal();\n// Salida: Soy global\n```\n\n### Scope Local\n\n```javascript\nfunction ejemploScopeLocal() {\n  let localVar = \"Soy local\";\n  console.log(localVar);\n}\n\nejemploScopeLocal();\n// Salida: Soy local\n\nconsole.log(localVar); // ¬°Error!\n```\n\nLas variables declaradas con `let` y `const` tienen un √°mbito de bloque, limitando su accesibilidad al bloque en el que se declaran.\n\n## Conclusi√≥n\n\nEn esta parte de nuestra gu√≠a de JavaScript, hemos explorado c√≥mo crear y ejecutar funciones, as√≠ como las diferencias entre `var`, `let` y `const`. Entender estos conceptos es esencial para construir aplicaciones s√≥lidas y comprender c√≥mo las variables afectan el flujo y la estructura de tu c√≥digo. En la pr√≥xima entrega, nos sumergiremos en conceptos m√°s avanzados y te llevaremos a trav√©s de ejercicios pr√°cticos para consolidar tus conocimientos. ¬°Sigue explorando y desbloquea el potencial de JavaScript en tus proyectos web! üöÄ‚ú®";
						const data = {title:"JavaScript:Funciones y ambito de las variables",description:"Funciones y Comprendiendo Variables",pubDate:new Date(1704754800000),heroImage:"../img/img_blog/javascript3.webp"};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/REDOUANE ESTC/Desktop/sofidev-portfolio-astro-sofidev/src/content/blog/funciones-js.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
